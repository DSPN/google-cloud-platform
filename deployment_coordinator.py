# Copyright 2015 Google Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""Creates a VM instance that monitors outputs from a deployment."""
import copy
import common
import default
import vm_instance
import yaml

# Check vm_instance for additional properties
DC_MANIFEST = default.DC_MANIFEST
DEPLOYMENT = default.DEPLOYMENT
FIXED_GCLOUD = default.FIXED_GCLOUD
METADATA = default.METADATA
SERVICE_ACCOUNTS = default.SERVICE_ACCOUNTS
SRCIMAGE = default.SRCIMAGE

# Defaults
DC_ADDITIONAL_SCOPES = [{
    'email': 'default',
    'scopes': [
        'https://www.googleapis.com/auth/compute',
        'https://www.googleapis.com/auth/ndev.cloudman.readonly',
        'https://www.googleapis.com/auth/replicapool.readonly'
    ]
}]

STARTUP_SCRIPT = 'startup-script'
IMAGE = 'coord-1-1509221555-debian-8-jessie-v20150915'
STARTUP_SCRIPT_YAML = """key: %s
value: |
       #!/bin/bash
       # Copyright 2015 Google Inc. All rights reserved.
       if [ ! -e /opt/c2d/manifest ]; then
         /opt/c2d/dump_manifest.sh
       fi
       /opt/c2d/startup-script.sh
""" % STARTUP_SCRIPT
MANIFEST_YAML = """key: %s
value: |
       %s
""" % (DC_MANIFEST, '%s')


def GenerateDeploymentCoordinator(context):
  """Generates an instance of a deployment coordinator with a manifest."""
  prop = context.properties
  # Fixes up the resource name
  context.env['name'] = context.env['deployment'] + '-coord'
  if SRCIMAGE in prop:
    raise common.Error(
        '"%s" can\'t be provided to a deployment cooridinator' % SRCIMAGE)
  metadata = prop.setdefault(METADATA, dict())
  items = metadata.setdefault('items', list())
  item_keys = [i['key'] for i in items]
  # Make sure there is a default service account
  prop.setdefault(SERVICE_ACCOUNTS, copy.deepcopy(DC_ADDITIONAL_SCOPES))
  if DEPLOYMENT not in item_keys:
    items.append({'key': DEPLOYMENT, 'value': context.env['deployment']})
  if STARTUP_SCRIPT in item_keys:
    raise common.Error(
        '"%s" can\'t be overwritten by this module' % STARTUP_SCRIPT)
  items.append(yaml.load(STARTUP_SCRIPT_YAML))
  if FIXED_GCLOUD in prop and FIXED_GCLOUD.upper() not in item_keys:
    if prop[FIXED_GCLOUD]:
      items.append({'key': 'FIXED_GCLOUD', 'value': 'Set'})
  if DC_MANIFEST in prop:
    manifest = yaml.load(MANIFEST_YAML % '\n       '.join(prop[DC_MANIFEST]))
    items.append(manifest)
  prop[SRCIMAGE] = IMAGE
  return vm_instance.GenerateComputeVM(context)


def GenerateResourceList(context):
  """Returns list of resources generated by this module."""
  resources = GenerateDeploymentCoordinator(context)
  return resources


@common.FormatErrorsDec
def GenerateConfig(context):
  """Generates YAML resource configuration."""
  return common.MakeResource(GenerateResourceList(context))
